// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/minskylab/life/example/ent/autor"
	"github.com/minskylab/life/example/ent/predicate"
	"github.com/minskylab/life/example/ent/todo"
)

// AutorUpdate is the builder for updating Autor entities.
type AutorUpdate struct {
	config
	hooks      []Hook
	mutation   *AutorMutation
	predicates []predicate.Autor
}

// Where adds a new predicate for the builder.
func (au *AutorUpdate) Where(ps ...predicate.Autor) *AutorUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *AutorUpdate) SetName(s string) *AutorUpdate {
	au.mutation.SetName(s)
	return au
}

// SetSignature sets the signature field.
func (au *AutorUpdate) SetSignature(s string) *AutorUpdate {
	au.mutation.SetSignature(s)
	return au
}

// SetNillableSignature sets the signature field if the given value is not nil.
func (au *AutorUpdate) SetNillableSignature(s *string) *AutorUpdate {
	if s != nil {
		au.SetSignature(*s)
	}
	return au
}

// ClearSignature clears the value of signature.
func (au *AutorUpdate) ClearSignature() *AutorUpdate {
	au.mutation.ClearSignature()
	return au
}

// AddTodoIDs adds the todos edge to Todo by ids.
func (au *AutorUpdate) AddTodoIDs(ids ...string) *AutorUpdate {
	au.mutation.AddTodoIDs(ids...)
	return au
}

// AddTodos adds the todos edges to Todo.
func (au *AutorUpdate) AddTodos(t ...*Todo) *AutorUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTodoIDs(ids...)
}

// Mutation returns the AutorMutation object of the builder.
func (au *AutorUpdate) Mutation() *AutorMutation {
	return au.mutation
}

// ClearTodos clears all "todos" edges to type Todo.
func (au *AutorUpdate) ClearTodos() *AutorUpdate {
	au.mutation.ClearTodos()
	return au
}

// RemoveTodoIDs removes the todos edge to Todo by ids.
func (au *AutorUpdate) RemoveTodoIDs(ids ...string) *AutorUpdate {
	au.mutation.RemoveTodoIDs(ids...)
	return au
}

// RemoveTodos removes todos edges to Todo.
func (au *AutorUpdate) RemoveTodos(t ...*Todo) *AutorUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTodoIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AutorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AutorUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AutorUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AutorUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AutorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   autor.Table,
			Columns: autor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: autor.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autor.FieldName,
		})
	}
	if value, ok := au.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autor.FieldSignature,
		})
	}
	if au.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: autor.FieldSignature,
		})
	}
	if au.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTodosIDs(); len(nodes) > 0 && !au.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AutorUpdateOne is the builder for updating a single Autor entity.
type AutorUpdateOne struct {
	config
	hooks    []Hook
	mutation *AutorMutation
}

// SetName sets the name field.
func (auo *AutorUpdateOne) SetName(s string) *AutorUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetSignature sets the signature field.
func (auo *AutorUpdateOne) SetSignature(s string) *AutorUpdateOne {
	auo.mutation.SetSignature(s)
	return auo
}

// SetNillableSignature sets the signature field if the given value is not nil.
func (auo *AutorUpdateOne) SetNillableSignature(s *string) *AutorUpdateOne {
	if s != nil {
		auo.SetSignature(*s)
	}
	return auo
}

// ClearSignature clears the value of signature.
func (auo *AutorUpdateOne) ClearSignature() *AutorUpdateOne {
	auo.mutation.ClearSignature()
	return auo
}

// AddTodoIDs adds the todos edge to Todo by ids.
func (auo *AutorUpdateOne) AddTodoIDs(ids ...string) *AutorUpdateOne {
	auo.mutation.AddTodoIDs(ids...)
	return auo
}

// AddTodos adds the todos edges to Todo.
func (auo *AutorUpdateOne) AddTodos(t ...*Todo) *AutorUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTodoIDs(ids...)
}

// Mutation returns the AutorMutation object of the builder.
func (auo *AutorUpdateOne) Mutation() *AutorMutation {
	return auo.mutation
}

// ClearTodos clears all "todos" edges to type Todo.
func (auo *AutorUpdateOne) ClearTodos() *AutorUpdateOne {
	auo.mutation.ClearTodos()
	return auo
}

// RemoveTodoIDs removes the todos edge to Todo by ids.
func (auo *AutorUpdateOne) RemoveTodoIDs(ids ...string) *AutorUpdateOne {
	auo.mutation.RemoveTodoIDs(ids...)
	return auo
}

// RemoveTodos removes todos edges to Todo.
func (auo *AutorUpdateOne) RemoveTodos(t ...*Todo) *AutorUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTodoIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AutorUpdateOne) Save(ctx context.Context) (*Autor, error) {
	var (
		err  error
		node *Autor
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AutorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AutorUpdateOne) SaveX(ctx context.Context) *Autor {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AutorUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AutorUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AutorUpdateOne) sqlSave(ctx context.Context) (_node *Autor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   autor.Table,
			Columns: autor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: autor.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Autor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autor.FieldName,
		})
	}
	if value, ok := auo.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: autor.FieldSignature,
		})
	}
	if auo.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: autor.FieldSignature,
		})
	}
	if auo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTodosIDs(); len(nodes) > 0 && !auo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   autor.TodosTable,
			Columns: []string{autor.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Autor{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
