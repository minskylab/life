input LoginCredentials {
    username: String!
    password: String!
}

type LoginResponse {
    token: String!
    user: User!
}
type Competency {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
    metadata: Map!
    # TODO: Add more
}
type Department {
    id: String!

    code: String!
    name: String!
    expectedNumberOfSeats: Int!

    parent: Department

    jobs: [Job!]!

    metadata: Map!
}
type Error {
    id: String!

    message: String!
    source: String

    at: Time
}
type DownloadableFile {
    blobURL: String!
    contentType: String!

    createdAt: Time!
    expireAt: Time!

    hash: String
}

input FileUpload {
    file: Upload!
}
# Done
type MissionVerb {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
    mission: JobMission!
}

# Done
type MissionTool {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
    mission: JobMission!
}

type ResponsibilityLevel {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
    function: JobFunction!
}

type ProcessLevel {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type InstructionGraduate {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type InstructionSpeciality {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type MasterAndDoctorate {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type CourseAndGraduate {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type LanguageProficiency {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type Software {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type ExperienceTime {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type Area {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type Sector {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type JobClass {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type TravelAvailability {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type LicenceRequirement {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type ContractKind {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type WorkKind {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type RiskKind {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
    metadata: Map!
}

type JobFamily {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type JobOccupationalGroup {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type JobCampus {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}

type Guide {
    id: String!
    creator: User!
    organization: Organization!
    protected: Boolean!

    value: String!
}
enum FundamentalKind {
    MiSSION_VERB
    MISSION_TOOL
    RESPONSIBILITY_LEVEL
    PROCESS_LEVEL
    INSTRUCTION_GRADUATE
    INSTRUCTION_SPECIALITY
    MASTER_AND_DOCTORATE
    COURSE_AND_GRADUATE
    LANGUAGE_PROFICIENCY
    SOFTWARE
    EXPERIENCE_TIME
    AREA
    SECTOR
    JOB_CLASS
    TRAVEL_AVAILABILITY
    LICENCE_REQUIREMENT
    CONTRACT_KIND
    WORK_KIND
    RISK_KIND
    JOB_FAMILY
    JOB_OCCUPATIONAL_GROUP
    JOB_CAMPUS
    GUIDE
}

type GenericFundamental {
    id: String!
    kind: FundamentalKind!
    value: String
    valueMap: Map
}
# TODO
type JobDescription {
    id: String!
}
type Job {
    id: String!

    createdAt: Time!
    updatedAt: Time!

    name: String!
    code: String!
    metadata: Map!

    sites: Int!
    placedIn: Department!

    occupationalGroup: JobOccupationalGroup
    family: JobFamily
    campus: JobCampus

    category: Int!

    mission: JobMission!
    functions: [JobFunction!]!
    profile: JobProfile!

    workers: [Worker!]!
}

type JobMission {
    id: String!

    # jobParent: Job!

    actionAndScope: [MissionVerb!]!
    guides: [MissionTool!]!

    goal: String!
    scope: String!
}

type JobFunction {
    id: String!

    # jobParent: Job!

    actions: [String!]!
    objective: String!

    # responsabilityLevel: ResponsabilityLevel!

    # <valoracion>
    assessment: JobFunctionAssessment!
}

type JobProfile {
    id: String!

    education: JobProfileEducation!
    complementaryEducation: JobProfileComplementaryEducation!
    experience: JobProfileExperience!
    risk: RiskKind!
    extra: JobProfileExtraRequeriments!
    competencies: JobProfileCompetency!
}

type JobProfileCompetency { # TODO
    organizationals: [Competency!]!
    functionals: [Competency!]!
}

type JobProfileExtraRequeriments {
    id: String!

    class: JobClass!
    travelAvailability: TravelAvailability!
    licenceRequeriment: LicenceRequirement!
    contractKind: ContractKind!
    workKind: WorkKind!
}

type JobProfileExperience {
    id: String!

    experienceTime: ExperienceTime!
    areas: [Area!]!
    sectors: [Sector!]!
    others: String!
}

type JobProfileEducation {
    id: String!

    instructionLevel: InstructionGraduate!
    instructionSpecialities: [InstructionSpeciality!]!
}

type JobProfileComplementaryEducation {
    id: String!

    postGraduate: MasterAndDoctorate!
    courses: [CourseAndGraduate!]!
    languages: [LanguageProficiency!]!
    softwares: [Software!]!
}

# Function Value
type JobFunctionAssessment {
    id: String!
    # functionParent: JobFunction!

    frequency: JobFunctionFrequency!
    errorConsequence: JobFunctionErrorConsequence!
    complexity: JobFunctionComplexity!

    kpis: [JobFunctionKPI!]!
}

enum JobFunctionFrequency {
    DIARY
    WEEKLY
    MONTHLY
}

# TODO: Validate it
enum JobFunctionErrorConsequence {
    HIGH
    MEDIUM
    LOW
}

# TODO: Validate it
enum JobFunctionComplexity {
    HIGH
    MEDIUM
    LOW
}

# Measurement criterion
type JobFunctionKPI {
    id: String!

    name: String!
    value: String!
}

enum JobSortParam {
    ID
    NAME
    LAST_UPDATE
}
# type Log {
#     id: String!
#     autor: String!

#     createdAt: Time!

#     message: String!
# }

type LogEntry {
    id: String!
}
type Mutation {
    login(credentials: LoginCredentials): LoginResponse!
    newUpdateOrganizationAndJobs(orgsAndJobs: FileUpload!): OrganizationAndJobsUpdate!
    promoteUpdate(updateID: String!): PromotedOrganizationAndJobsUpdate!

    createNewFundamental(fundamentalKind: FundamentalKind!, value: String, valueMap: Map): NewFundamentalResponse!
    deleteFundamental(fundamentalKind: FundamentalKind!, id: String!): Boolean!
    editFundamental(fundamentalKind: FundamentalKind!, id: String!, name: String!, value: Map!): NewFundamentalResponse!

    createNewJob(job: JobPayloadInput!): Job!
    deleteJob(id: String!): Job!
    editJob(update: JobPayloadUpdate!): Job!
}

input JobPayloadInput {
    department: DepartmentCreateOrUse!

    code: String!
    name: String!

    sites: Int

    occupationalGroup: OccupationalGroupCreateOrUse
    family: FamilyCreateOrUse
    campus: CampusCreateOrUse
}

input JobPayloadUpdate {
    department: DepartmentCreateOrUse

    code: String
    name: String

    sites: Int

    occupationalGroup: OccupationalGroupCreateOrUse
    family: FamilyCreateOrUse
    campus: CampusCreateOrUse
}

input OccupationalGroupCreateOrUse {
    fromID: String
    newValue: String
}

input FamilyCreateOrUse {
    fromID: String
    newValue: String
}

input CampusCreateOrUse {
    fromID: String
    newValue: String
}

input DepartmentCreateOrUse {
    fromID: String
    create: NewDepartment
}

input NewDepartment {
    code: String!
    name: String!

    parent: String
}

type OrganizationAndJobsUpdate {
    updateID: String!
    totalNewRows: Int!
    preview: String!
}

type PromotedOrganizationAndJobsUpdate {
    updateID: String!

    addedRows: Int!
    updatedRows: Int!
    deletedRows: Int!
}

type NewFundamentalResponse {
    id: String!
    fundamentalKind: FundamentalKind!
    value: String
    metadata: Map
}
type Organization {
    id: String!

    name: String!
    admin: User!

    brand: OrganizationBrand!

    fundamentals: OrganizationFundamentals!

    jobs: [Job!]!
    workers: [Worker!]!

    files: [OrganizationAsset!]!
}

type OrganizationFundamentals {
    missionVerbs: [MissionVerb!]!
    missionTools: [MissionTool!]!
    responsibilityLevels: [ResponsibilityLevel!]!
    processLevels: [ProcessLevel!]!
    instructionGraduates: [InstructionGraduate!]!
    instructionSpecialities: [InstructionSpeciality!]!
    masterAndDoctorates: [MasterAndDoctorate!]!
    courseAndGraduates: [CourseAndGraduate!]!
    languageProficiencies: [LanguageProficiency!]!
    softwares: [Software!]!
    experienceTimes: [ExperienceTime!]!
    areas: [Area!]!
    sectors: [Sector!]!
    jobClasss: [JobClass!]!
    travelAvailabilities: [TravelAvailability!]!
    licenceRequirements: [LicenceRequirement!]!
    contractKinds: [ContractKind!]!
    workKinds: [WorkKind!]!
    riskKinds: [RiskKind!]!
    jobFamilies: [JobFamily!]!
    jobOccupationalGroups: [JobOccupationalGroup!]!
    jobCampus: [JobCampus!]!
    guides: [Guide!]!
}

type OrganizationBrand {
    id: String!

    photo: String!
    brandName: String!

    primaryColor: String
    secondaryColor: String
}

type OrganizationAsset {
    id: String!
    blobURL: String!
    name: String!
    parent: Organization!
}
type Query {
    user(id: String!): User!
    organization(orgID: String!): Organization!
    fundamental(orgID: String!, fundamental: FundamentalKind!): [GenericFundamental!]!

    downloadOrganizationAndJobs: DownloadableFile!

    structureTree(orgID: String!): [StructureTree!]!
    structureSummary(orgID: String!): StructureSummary!

    jobs(orgID: String!, sortedBy: JobSortParam!): [Job!]!
    job(orgID: String!, jobID: String!): Job!
}
scalar Time
scalar Map
scalar Upload
type StructureTree {
    isRoot: Boolean
    value: Department!
    children: [Department!]!
}

type StructureSummary {
    totalDepartments: Int!
    totalJobs: Int!
    totalSites: Int!
}
# type SalarialStudy {
#     id: String!
#     # logs: [Log!]!

#     # ...
# }

type SalarialStudy {
    id: String!
}
type User {
    id: String!
    name: String!
    email: String!
    # passwordHash: String!

    roles: [Role!]!
}

enum RoleRealm {
    ADMIN
    MODERATOR
    AMBASSADOR
    ORGANIZATION
    NORMAL
}

type Role {
    id: String!
    name: String!
    kind: RoleRealm!

    users: [User!]!

    organization: Organization!

    capabilities: [Access!]!
}

type Access {
    id: String!
    role: Role!
    resource: String!

    write: Boolean!
    read: Boolean!
    delete: Boolean!
}
type ValorationFactor {
    id: String!

    creator: String!
    name: String!
    description: String!
}
type Worker {
    id: String!

    creator: User!

    code: String!

    supervisor: Job!
    job: Job!

    email: String!
    name: String!
    lastname: String!
    nif: String!
    gender: String!
    biologicalSex: BiologicalSex!

    birthdate: Time!
    incorporationDate: Time!

    phone: String!
    anotherPhone: String!
    direction: String!
    country: String!

    metadata: Map!
}

enum BiologicalSex {
    MALE
    FEMALE
    INTERSEXUAL
    UNKNOWN
}
